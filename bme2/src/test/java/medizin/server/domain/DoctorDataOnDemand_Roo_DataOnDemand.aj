// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package medizin.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import medizin.server.domain.Doctor;
import medizin.server.domain.DoctorDataOnDemand;
import medizin.shared.Gender;
import org.springframework.stereotype.Component;

privileged aspect DoctorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DoctorDataOnDemand: @Component;
    
    private Random DoctorDataOnDemand.rnd = new SecureRandom();
    
    private List<Doctor> DoctorDataOnDemand.data;
    
    public Doctor DoctorDataOnDemand.getNewTransientDoctor(int index) {
        Doctor obj = new Doctor();
        setEmail(obj, index);
        setGender(obj, index);
        setIsActive(obj, index);
        setName(obj, index);
        setPreName(obj, index);
        setTelephone(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void DoctorDataOnDemand.setEmail(Doctor obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 40) {
            email = email.substring(0, 40);
        }
        obj.setEmail(email);
    }
    
    public void DoctorDataOnDemand.setGender(Doctor obj, int index) {
        Gender gender = Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void DoctorDataOnDemand.setIsActive(Doctor obj, int index) {
        Boolean isActive = Boolean.TRUE;
        obj.setIsActive(isActive);
    }
    
    public void DoctorDataOnDemand.setName(Doctor obj, int index) {
        String name = "name_" + index;
        if (name.length() > 40) {
            name = name.substring(0, 40);
        }
        obj.setName(name);
    }
    
    public void DoctorDataOnDemand.setPreName(Doctor obj, int index) {
        String preName = "preName_" + index;
        if (preName.length() > 40) {
            preName = preName.substring(0, 40);
        }
        obj.setPreName(preName);
    }
    
    public void DoctorDataOnDemand.setTelephone(Doctor obj, int index) {
        String telephone = "telephone_" + index;
        if (telephone.length() > 30) {
            telephone = telephone.substring(0, 30);
        }
        obj.setTelephone(telephone);
    }
    
    public void DoctorDataOnDemand.setTitle(Doctor obj, int index) {
        String title = "title_" + index;
        if (title.length() > 40) {
            title = title.substring(0, 40);
        }
        obj.setTitle(title);
    }
    
    public Doctor DoctorDataOnDemand.getSpecificDoctor(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Doctor obj = data.get(index);
        Long id = obj.getId();
        return Doctor.findDoctor(id);
    }
    
    public Doctor DoctorDataOnDemand.getRandomDoctor() {
        init();
        Doctor obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Doctor.findDoctor(id);
    }
    
    public boolean DoctorDataOnDemand.modifyDoctor(Doctor obj) {
        return false;
    }
    
    public void DoctorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Doctor.findDoctorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Doctor' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Doctor>();
        for (int i = 0; i < 10; i++) {
            Doctor obj = getNewTransientDoctor(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
