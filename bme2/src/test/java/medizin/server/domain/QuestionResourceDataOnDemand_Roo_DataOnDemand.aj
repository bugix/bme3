// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package medizin.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import medizin.server.domain.Question;
import medizin.server.domain.QuestionDataOnDemand;
import medizin.server.domain.QuestionResource;
import medizin.server.domain.QuestionResourceDataOnDemand;
import medizin.shared.MultimediaType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect QuestionResourceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuestionResourceDataOnDemand: @Component;
    
    private Random QuestionResourceDataOnDemand.rnd = new SecureRandom();
    
    private List<QuestionResource> QuestionResourceDataOnDemand.data;
    
    @Autowired
    QuestionDataOnDemand QuestionResourceDataOnDemand.questionDataOnDemand;
    
    public QuestionResource QuestionResourceDataOnDemand.getNewTransientQuestionResource(int index) {
        QuestionResource obj = new QuestionResource();
        setImageHeight(obj, index);
        setImageWidth(obj, index);
        setName(obj, index);
        setPath(obj, index);
        setQuestion(obj, index);
        setSequenceNumber(obj, index);
        setType(obj, index);
        return obj;
    }
    
    public void QuestionResourceDataOnDemand.setImageHeight(QuestionResource obj, int index) {
        Integer imageHeight = new Integer(index);
        obj.setImageHeight(imageHeight);
    }
    
    public void QuestionResourceDataOnDemand.setImageWidth(QuestionResource obj, int index) {
        Integer imageWidth = new Integer(index);
        obj.setImageWidth(imageWidth);
    }
    
    public void QuestionResourceDataOnDemand.setName(QuestionResource obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void QuestionResourceDataOnDemand.setPath(QuestionResource obj, int index) {
        String path = "path_" + index;
        obj.setPath(path);
    }
    
    public void QuestionResourceDataOnDemand.setQuestion(QuestionResource obj, int index) {
        Question question = questionDataOnDemand.getRandomQuestion();
        obj.setQuestion(question);
    }
    
    public void QuestionResourceDataOnDemand.setSequenceNumber(QuestionResource obj, int index) {
        Integer sequenceNumber = new Integer(index);
        obj.setSequenceNumber(sequenceNumber);
    }
    
    public void QuestionResourceDataOnDemand.setType(QuestionResource obj, int index) {
        MultimediaType type = null;
        obj.setType(type);
    }
    
    public QuestionResource QuestionResourceDataOnDemand.getSpecificQuestionResource(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        QuestionResource obj = data.get(index);
        Long id = obj.getId();
        return QuestionResource.findQuestionResource(id);
    }
    
    public QuestionResource QuestionResourceDataOnDemand.getRandomQuestionResource() {
        init();
        QuestionResource obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return QuestionResource.findQuestionResource(id);
    }
    
    public boolean QuestionResourceDataOnDemand.modifyQuestionResource(QuestionResource obj) {
        return false;
    }
    
    public void QuestionResourceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = QuestionResource.findQuestionResourceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'QuestionResource' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<QuestionResource>();
        for (int i = 0; i < 10; i++) {
            QuestionResource obj = getNewTransientQuestionResource(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
